use crate::add_cell;

pub fn pitstop(file_path: &str) {
    let pitstop:Vec<String> = vec![
        "def getDriverPosition(abbreviation: str):\n".to_string(),
        "    res = race.results\n".to_string(),
        "    abbr = res[\"Abbreviation\"] == abbreviation\n".to_string(),
        "    pos = res.loc[abbr, [\"Position\"]]\n".to_string(),
        "    posi = pos.iloc[-1]\n".to_string(),
        "    return int(posi.iloc[0])\n".to_string(),
        "\n".to_string(),
        "\n".to_string(),
        "def getCompound(abbreviation: str):\n".to_string(),
        "    driver_race = race.laps.pick_driver(abbreviation)\n".to_string(),
        "    lastLap = driver_race.LapNumber.count()\n".to_string(),
        "    if driver_race[\"TyreLife\"].iloc[0] == 1.0:\n".to_string(),
        "        condition = driver_race[\"TyreLife\"] == 1\n".to_string(),
        "        driver_comp = driver_race.loc[condition, [\"Compound\", \"LapNumber\"]]\n".to_string(),
        "        compound = driver_comp.Compound.tolist()\n".to_string(),
        "        return compound, driver_comp, lastLap\n".to_string(),
        "    else:\n".to_string(),
        "        compound = []\n".to_string(),
        "        result = []\n".to_string(),
        "        for i in range(0, len(driver_race[\"TyreLife\"])):\n".to_string(),
        "            if driver_race[\"TyreLife\"].iloc[i] < driver_race[\"TyreLife\"].iloc[i - 1]:\n".to_string(),
        "                result.append(\n".to_string(),
        "                    {\n".to_string(),
        "                        \"Compound\": driver_race[\"Compound\"].iloc[i],\n".to_string(),
        "                        \"LapNumber\": driver_race[\"LapNumber\"].iloc[i],\n".to_string(),
        "                    }\n".to_string(),
        "                )\n".to_string(),
        "                compound.append(driver_race[\"Compound\"].iloc[i])\n".to_string(),
        "\n".to_string(),
        "        driver_comp = pd.DataFrame(result)\n".to_string(),
        "        return compound, driver_comp, lastLap\n".to_string(),
        "\n".to_string(),
        "\n".to_string(),
        "fig, ax = plt.subplots(figsize=(10, 6))\n".to_string(),
        "\n".to_string(),
        "color_mapping = {\n".to_string(),
        "    \"MEDIUM\": \"yellow\",\n".to_string(),
        "    \"SOFT\": \"red\",\n".to_string(),
        "    \"HARD\": \"white\",\n".to_string(),
        "    \"INTERMEDIATE\": \"green\",\n".to_string(),
        "    \"WET\": \"blue\",\n".to_string(),
        "}\n".to_string(),
        "drivers = race.laps.Driver.unique()\n".to_string(),
        "drivers_ab = drivers.tolist()\n".to_string(),
        "used_labels = set()\n".to_string(),
        "for driver in drivers_ab:\n".to_string(),
        "    compound, driver_comp, lastLap = getCompound(driver)\n".to_string(),
        "\n".to_string(),
        "    list1 = driver_comp.LapNumber.tolist()\n".to_string(),
        "    list1.append(lastLap)\n".to_string(),
        "    int_list = [int(x) for x in list1]\n".to_string(),
        "    x_points = int_list\n".to_string(),
        "    n = len(int_list)\n".to_string(),
        "    posi = getDriverPosition(driver)\n".to_string(),
        "    y_points = [posi] * n\n".to_string(),
        "\n".to_string(),
        "    for i in range(len(driver_comp.LapNumber)):\n".to_string(),
        "        x_segment = [x_points[i], x_points[i + 1]]\n".to_string(),
        "        y_segment = [y_points[i], y_points[i + 1]]\n".to_string(),
        "        tire_color = color_mapping.get(compound[i], \"#000000\")\n".to_string(),
        "        label = compound[i] if compound[i] not in used_labels else None\n".to_string(),
        "        \n".to_string(),
        "        ax.plot(x_segment, y_segment, color=tire_color, linewidth=2, label=label)\n".to_string(),
        "        used_labels.add(compound[i])\n".to_string(),
        "\n".to_string(),
        "        ax.text(\n".to_string(),
        "            x_points[i + 1],\n".to_string(),
        "            y_points[i + 1],\n".to_string(),
        "            str(x_points[i + 1]),\n".to_string(),
        "            fontsize=12,\n".to_string(),
        "            ha=\"center\",\n".to_string(),
        "            va=\"center\",\n".to_string(),
        "            bbox=dict(facecolor=\"black\", edgecolor=\"white\", pad=1),\n".to_string(),
        "        )\n".to_string(),
        "        ax.annotate(f'{i}',\n".to_string(),
        "                xy=(0, 1),\n".to_string(),
        "                xytext=(-10, 0),\n".to_string(),
        "                textcoords='offset points',\n".to_string(),
        "                va='center',\n".to_string(),
        "                ha='right',\n".to_string(),
        "                color=\"white\",\n".to_string(),
        "                fontweight='bold')\n".to_string(),
        "    ax.text(\n".to_string(),
        "        x_points[0], \n".to_string(),
        "        y_points[0], \n".to_string(),
        "        driver, \n".to_string(),
        "        fontsize=12, \n".to_string(),
        "        ha='right', \n".to_string(),
        "        va='center', \n".to_string(),
        "        color=\"white\", \n".to_string(),
        "        fontweight='bold',\n".to_string(),
        "    )\n".to_string(),
        "    \n".to_string(),
        "ax.set_xlim(1, 53)\n".to_string(),
        "ax.invert_yaxis()\n".to_string(),
        "ax.set_ylim(21, 0)\n".to_string(),
        "ax.set_title(\"Pit Stop Strategy Position wise\")\n".to_string(),
        "ax.set_xlabel(\"Laps\")\n".to_string(),
        "plt.gca().set_yticks([])\n".to_string(),
        "ax.axvline(x=0, color='black', linewidth=2)\n".to_string(),
        "ax.grid(True, linestyle=\"-\", alpha=0.7)\n".to_string(),
        "plt.legend(bbox_to_anchor=(1.05, 1), loc=\"upper left\", borderaxespad=0.0)\n".to_string(),
        "plt.show()".to_string()
    ];

    add_cell(file_path, pitstop);
}
